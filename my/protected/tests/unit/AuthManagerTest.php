<?php

/**
 * TestCase for /system/components/auth/AuthManager
 */
class AuthManagerTest extends CTestCase
{
    protected $authComponent;

    /**
     * (non-PHPdoc)
     * @see PHPUnit_Framework_TestCase::setUp()
     */
    protected function setUp()
    {
        parent::setUp();
        Yii::import('sys.components.auth.*');
        Yii::import('sys.components.db');

        $this->authComponent = AuthManager::getInstance();
    }

    /**
     * test keep session ID
     */
    public function testAuthKeepCurrentSessionId()
    {
        $a = $this->authComponent;
        $session = $a->getSessionComponent();
        $session->open();
        $sid = $session->getSessionID();

        $a->setKeepCurrentSessionId(true)->openSession($a->getOfficeSessionId(), 'some_prefix');
        $this->assertEquals($sid, $session->getSessionID());
    }

    /**
     *
     */
    public function testTraderAuthInvalidPwd()
    {
        $identity = new CTraderIdentity('andrushin.anton@gmail.com', 'invalidPwd');
        $this->assertFalse($identity->authenticate());
    }

    /**
     * @return CTraderIdentity
     */
    public function testTraderAuthSuccess()
    {
        $identity = new CTraderIdentity('andrushin.anton@gmail.com', '123456789');
        $this->assertTrue($identity->authenticate());
        $this->assertTrue($identity->getModel() instanceof USER);
        $identity->setStateParams();
        $webUser = AuthManager::getInstance()->getWebUser();
        $this->assertTrue($webUser->login($identity));

        $stateKeys = array('username', 'email', 'deposit_allowed', 'lang', 'godmode',
            'isVip', 'isTrader', 'isPartner',
            'IsWelcomeBonusAllowed', 'IsCreateAccountEnabled', 'IsTransfersAllowed',
            'IsWelcomeBonusEnabled', 'hasCQGAccount',
        );

        foreach ($stateKeys as $key) {
            $this->assertTrue($webUser->hasState($key), $key);
        }
        return $identity;
    }

    /**
     *
     */
    public function testPartnerAuthInvalidPwd()
    {
        $identity = new CPartnerIdentity('a.andrushin@tradefort.ru', 'invalidPwd');
        $this->assertFalse($identity->authenticate());
    }

    /**
     * @return CPartnerIdentity
     */
    public function testPartnerAuthSuccess()
    {
        $identity = new CPartnerIdentity('a.andrushin@tradefort.ru', '123456789');

        $this->assertTrue($identity->authenticate());
        $this->assertTrue($identity->getModel() instanceof PARTNER);
        $identity->setStateParams();
        $webUser = AuthManager::getInstance()->getWebUser();
        $this->assertTrue($webUser->login($identity));


        $stateKeys = array('username', 'email', 'deposit_allowed', 'lang', 'godmode',
            'isVip', 'isTrader', 'isPartner',
            'withdraw_from_client_allowed', 'approved_partner', 'IsRegEnabled'
        );

        foreach ($stateKeys as $key) {
            $this->assertTrue($webUser->hasState($key), "State '{$key}' not exists or has NULL value.");
        }
        return $identity;
    }


    /**
     * @return string
     */
    public function testSetGetRegenerateCsrfToken()
    {
        $a = $this->authComponent;
        $token = $a->generateUniqid();
        $cookies = $a->getRequest()->getCookies();

        $a->setCSRFToken($token, 'testkey');
        $this->assertEquals($token, $a->getRedis()->get('CSRFtestkey'));

        // check autogenerated token and key
        $cookies->remove('cf');
        $a->setCSRFToken();
        $key = (string) $cookies['cf'];

        $newToken = $a->getCSRFToken();
        $this->assertNotEquals($newToken, $token);
        $this->assertNotEmpty($newToken);
        $this->assertEquals($a->getRedis()->get('CSRF'. $key), $newToken);
        $this->assertNotEmpty($a->getRedis()->get('CSRF'. $key));

        // test re-generate token
        $this->assertNotEquals($newToken, $a->getCSRFToken(true));

        return $a->getCSRFToken();
    }

    /**
     * @depends testSetGetRegenerateCsrfToken
     * @return string
     */
    public function testSetCaptchaCode($token)
    {
        $a = $this->authComponent;
        $code = uniqid();
        $a->setCaptchaCode($code);

        $this->assertEquals($code, $a->getCaptchaCode());
        return $code;
    }

    /**
     * @depends testSetCaptchaCode
     * @param string $code
     */
    public function testValidateCaptchaCode($code)
    {
        $a = $this->authComponent;
        $this->assertTrue($a->validateCaptchaCode($code));
        $this->assertFalse($a->validateCaptchaCode('iNvAlIdCoDe'));
    }

    /**
     * @return string
     */
    public function testSetGetFailedLoginUsername()
    {
        $a = $this->authComponent;
        $username = 'not_exists@tradefort.ru';
        $a->setFailedLoginUsername($username);

        $this->assertEquals($username, $a->getFailedLoginUsername());
        return $username;
    }

    /**
     * @depends testSetGetFailedLoginUsername
     * @param string $username
     * @return array [$username, $num]
     */
    public function testGetFailedLoginAttemptsOfUser($username)
    {
        $a = $this->authComponent;
        $num = $a->getFailedLoginAttemptsOfUser($username);
        $this->assertInternalType('int', $num);
        return array($username, $num);
    }

    /**
     * @depends testGetFailedLoginAttemptsOfUser
     * @param string $username
     * @param integer $num
     * @return string
     */
    public function testIncrementFailedLoginAttemptsOfUser(array $params)
    {
        list($username, $num) = $params;
        $a = $this->authComponent;
        $a->incrementFailedLoginAttemptsOfUser((string) $username);
        $this->assertEquals($num + 1, $a->getFailedLoginAttemptsOfUser($username));
        return $username;
    }

    /**
     * @depends testIncrementFailedLoginAttemptsOfUser
     * @param string $username
     */
    public function testResetFailedLoginAttempts($username)
    {
        $a = $this->authComponent;
        $a->resetFailedloginAttemptsOfUser((string) $username);
        $this->assertEquals(0, $a->getFailedLoginAttemptsOfUser((string) $username));
    }


    /**
     * test AuthManager::loginTraderIdentity
     */
    public function testAuthLoginTraderIdentity()
    {
        $a = $this->authComponent;
        $identity = $a->loginTraderIdentity('andrushin.anton@gmail.com', '123456789');
        $this->assertFalse($a->getWebUser()->isGuest);
        $this->assertEquals($identity->getModel()->ID, $a->getWebUser()->getId());
    }

    /**
     * test AuthManager::loginPartnerIdentity
     */
    public function testAuthLoginPartnerIdentity()
    {
        $a = $this->authComponent;
        $identity = $a->loginPartnerIdentity('a.andrushin@tradefort.ru', 'wrongPwd', false);
        $this->assertFalse($a->getWebUser()->isGuest);
        $this->assertEquals($identity->getModel()->ID, $a->getWebUser()->getId());
    }

    /**
     * test AuthManager::login/logon/logout
     */
    public function testAuthLoginLogonLogout()
    {
        $a = $this->authComponent;
        // test login
        $this->assertTrue($a->login('a.andrushin@tradefort.ru', '123456789'));
        // test logon
        $this->assertTrue($a->logon($a->getSessionToken()));
        // test logout
        $this->assertTrue($a->logout());
        $this->assertTrue($a->getWebUser()->isGuest);
        $this->assertFalse($a->getCookies()->contains('_sid'));
        $this->assertFalse($a->getCookies()->contains('SID'));
        $this->assertFalse($a->getCookies()->contains('WID'));
    }

}